name: Release Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe_suffix: .exe
            archive_suffix: .zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            exe_suffix: .exe
            archive_suffix: .zip
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            exe_suffix: ""
            archive_suffix: .tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            exe_suffix: ""
            archive_suffix: .tar.gz
          
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe_suffix: ""
            archive_suffix: .tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            exe_suffix: ""
            archive_suffix: .tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            exe_suffix: ""
            archive_suffix: .tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            exe_suffix: ""
            archive_suffix: .tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        
        # Remove any conflicting packages first
        sudo apt-get remove -y gcc-multilib || true
        
        # Install musl tools for musl targets
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            mkdir -p ~/.cargo
            echo '[target.aarch64-unknown-linux-musl]' >> ~/.cargo/config.toml
            echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
          fi
        fi
        
        # Configure cross-compilation for aarch64 GNU
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        fi

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Run tests (native target only)
      if: matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin' || matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --release

    - name: Create archive directory
      shell: bash
      run: mkdir -p dist

    - name: Copy binary and create archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cp target/${{ matrix.target }}/release/json-mcp-server${{ matrix.exe_suffix }} dist/
        cp README.md LICENSE-MIT LICENSE-APACHE dist/
        cd dist
        7z a ../json-mcp-server-${{ matrix.target }}${{ matrix.archive_suffix }} *

    - name: Copy binary and create archive (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cp target/${{ matrix.target }}/release/json-mcp-server${{ matrix.exe_suffix }} dist/
        cp README.md LICENSE-MIT LICENSE-APACHE dist/
        cd dist
        tar czf ../json-mcp-server-${{ matrix.target }}${{ matrix.archive_suffix }} *

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: json-mcp-server-${{ matrix.target }}
        path: json-mcp-server-${{ matrix.target }}${{ matrix.archive_suffix }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
