name: Package Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential devscripts debhelper dh-cargo
        
        # Install cargo-deb for .deb packages
        cargo install cargo-deb
        
        # Install cargo-generate-rpm for .rpm packages  
        cargo install cargo-generate-rpm

    - name: Add package metadata to Cargo.toml
      run: |
        cat >> Cargo.toml << 'EOF'
        
        [package.metadata.deb]
        maintainer = "Eric Evans <CireSnave@gmail.com>"
        copyright = "2024, Eric Evans <CireSnave@gmail.com>"
        license-file = ["LICENSE-MIT", "4"]
        extended-description = """\
A high-performance Model Context Protocol (MCP) server that provides comprehensive \
JSON file operations optimized for LLM interactions. Features include reading, \
writing, querying with JSONPath, validation, and streaming support for large files."""
        depends = "$auto"
        section = "utility"
        priority = "optional"
        assets = [
            ["target/release/json-mcp-server", "usr/bin/", "755"],
            ["README.md", "usr/share/doc/json-mcp-server/", "644"],
            ["examples/mcp_clients/", "usr/share/doc/json-mcp-server/examples/", "644"],
        ]
        
        [package.metadata.generate-rpm]
        assets = [
            { source = "target/release/json-mcp-server", dest = "/usr/bin/json-mcp-server", mode = "755" },
            { source = "README.md", dest = "/usr/share/doc/json-mcp-server/README.md", mode = "644" },
            { source = "LICENSE-MIT", dest = "/usr/share/doc/json-mcp-server/LICENSE-MIT", mode = "644" },
            { source = "LICENSE-APACHE", dest = "/usr/share/doc/json-mcp-server/LICENSE-APACHE", mode = "644" },
        ]
        EOF

    - name: Build binary
      run: cargo build --release

    - name: Build .deb package
      run: cargo deb --no-build

    - name: Build .rpm package  
      run: cargo generate-rpm

    - name: Create Arch PKGBUILD
      run: |
        mkdir -p arch-package
        cd arch-package
        
        # Get package info
        VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        
        cat > PKGBUILD << EOF
        # Maintainer: Eric Evans <CireSnave@gmail.com>
        pkgname=json-mcp-server
        pkgver=${VERSION}
        pkgrel=1
        pkgdesc="A high-performance Model Context Protocol (MCP) server for JSON operations"
        arch=('x86_64')
        url="https://github.com/ciresnave/json-mcp-server"
        license=('MIT' 'Apache')
        depends=()
        makedepends=('rust' 'cargo')
        source=("https://github.com/ciresnave/json-mcp-server/archive/v\${pkgver}.tar.gz")
        sha256sums=('SKIP')
        
        build() {
            cd "\${pkgname}-\${pkgver}"
            cargo build --release --locked
        }
        
        package() {
            cd "\${pkgname}-\${pkgver}"
            install -Dm755 "target/release/json-mcp-server" "\${pkgdir}/usr/bin/json-mcp-server"
            install -Dm644 "README.md" "\${pkgdir}/usr/share/doc/\${pkgname}/README.md"
            install -Dm644 "LICENSE-MIT" "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE-MIT"
            install -Dm644 "LICENSE-APACHE" "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE-APACHE"
        }
        EOF

    - name: Upload deb package
      uses: actions/upload-artifact@v3
      with:
        name: json-mcp-server-deb
        path: target/debian/*.deb

    - name: Upload rpm package
      uses: actions/upload-artifact@v3
      with:
        name: json-mcp-server-rpm
        path: target/generate-rpm/*.rpm

    - name: Upload PKGBUILD
      uses: actions/upload-artifact@v3
      with:
        name: json-mcp-server-arch
        path: arch-package/PKGBUILD

  upload-to-release:
    name: Upload packages to release
    needs: build-packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all package artifacts
      uses: actions/download-artifact@v3
      with:
        path: packages

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/**/*.deb
          packages/**/*.rpm
          packages/**/PKGBUILD
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
