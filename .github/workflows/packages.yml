name: Package Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  workflow_run:
    workflows: ["Release Builds"]
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  build-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-packages-
          ${{ runner.os }}-cargo-
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        # Only install essential packages to avoid conflicts
        sudo apt-get install -y gcc libc6-dev pkg-config jq
        
        # Install cargo-deb for .deb packages (check if exists first)
        if ! command -v cargo-deb &> /dev/null; then
          cargo install cargo-deb
        else
          echo "cargo-deb already installed, skipping"
        fi
        
        # Install cargo-generate-rpm for .rpm packages (check if exists first)
        if ! command -v cargo-generate-rpm &> /dev/null; then
          cargo install cargo-generate-rpm
        else
          echo "cargo-generate-rpm already installed, skipping"
        fi

    - name: Add package metadata to Cargo.toml
      run: |
        cat >> Cargo.toml << 'EOF'
        
        [package.metadata.deb]
        maintainer = "Eric Evans <CireSnave@gmail.com>"
        copyright = "2024, Eric Evans <CireSnave@gmail.com>"
        license-file = ["LICENSE-MIT", "4"]
        extended-description = "A high-performance Model Context Protocol (MCP) server that provides comprehensive JSON file operations optimized for LLM interactions. Features include reading, writing, querying with JSONPath, validation, and streaming support for large files."
        section = "utility"
        priority = "optional"
        assets = [
            ["target/release/json-mcp-server", "usr/bin/", "755"],
            ["README.md", "usr/share/doc/json-mcp-server/", "644"],
            ["LICENSE-MIT", "usr/share/doc/json-mcp-server/", "644"],
            ["LICENSE-APACHE", "usr/share/doc/json-mcp-server/", "644"],
        ]
        
        [package.metadata.generate-rpm]
        assets = [
            { source = "target/release/json-mcp-server", dest = "/usr/bin/json-mcp-server", mode = "755" },
            { source = "README.md", dest = "/usr/share/doc/json-mcp-server/README.md", mode = "644" },
            { source = "LICENSE-MIT", dest = "/usr/share/doc/json-mcp-server/LICENSE-MIT", mode = "644" },
            { source = "LICENSE-APACHE", dest = "/usr/share/doc/json-mcp-server/LICENSE-APACHE", mode = "644" },
        ]
        EOF

    - name: Build binary
      run: cargo build --release

    - name: Build .deb package
      run: cargo deb --no-build

    - name: Build .rpm package  
      run: cargo generate-rpm

    - name: Create Arch PKGBUILD
      run: |
        mkdir -p arch-package
        cd arch-package
        
        # Get package info
        VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        
        cat > PKGBUILD << EOF
        # Maintainer: Eric Evans <CireSnave@gmail.com>
        pkgname=json-mcp-server
        pkgver=${VERSION}
        pkgrel=1
        pkgdesc="A high-performance Model Context Protocol (MCP) server for JSON operations"
        arch=('x86_64')
        url="https://github.com/ciresnave/json-mcp-server"
        license=('MIT' 'Apache')
        depends=()
        makedepends=('rust' 'cargo')
        source=("https://github.com/ciresnave/json-mcp-server/archive/v\${pkgver}.tar.gz")
        sha256sums=('SKIP')
        
        build() {
            cd "\${pkgname}-\${pkgver}"
            cargo build --release --locked
        }
        
        package() {
            cd "\${pkgname}-\${pkgver}"
            install -Dm755 "target/release/json-mcp-server" "\${pkgdir}/usr/bin/json-mcp-server"
            install -Dm644 "README.md" "\${pkgdir}/usr/share/doc/\${pkgname}/README.md"
            install -Dm644 "LICENSE-MIT" "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE-MIT"
            install -Dm644 "LICENSE-APACHE" "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE-APACHE"
        }
        EOF

    - name: Upload deb package
      uses: actions/upload-artifact@v4
      with:
        name: json-mcp-server-deb
        path: target/debian/*.deb

    - name: Upload rpm package
      uses: actions/upload-artifact@v4
      with:
        name: json-mcp-server-rpm
        path: target/generate-rpm/*.rpm

    - name: Upload PKGBUILD
      uses: actions/upload-artifact@v4
      with:
        name: json-mcp-server-arch
        path: arch-package/PKGBUILD

  upload-to-release:
    name: Upload packages to release
    needs: build-packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all package artifacts
      uses: actions/download-artifact@v4
      with:
        path: packages

    - name: Upload to Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          packages/**/*.deb
          packages/**/*.rpm
          packages/**/PKGBUILD
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
